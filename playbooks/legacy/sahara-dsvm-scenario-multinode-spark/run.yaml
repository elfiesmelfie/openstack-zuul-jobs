- hosts: all
  name: Autoconverted job legacy-sahara-dsvm-scenario-multinode-spark from old job
    gate-sahara-dsvm-scenario-multinode-spark-ubuntu-xenial-nv
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - shell:
        cmd: |
          set -e
          set -x
          cat > clonemap.yaml << EOF
          clonemap:
            - name: openstack-infra/devstack-gate
              dest: devstack-gate
          EOF
          /usr/zuul-env/bin/zuul-cloner -m clonemap.yaml --cache-dir /opt/git \
              git://git.openstack.org \
              openstack-infra/devstack-gate
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -e
          set -x
          export PYTHONUNBUFFERED=true
          export DEVSTACK_SUBNODE_CONFIG=" "
          export DEVSTACK_LOCAL_CONFIG="enable_plugin sahara git://git.openstack.org/openstack/sahara"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin ceilometer git://git.openstack.org/openstack/ceilometer"
          export DEVSTACK_LOCAL_CONFIG+=$'\n'"enable_plugin heat git://git.openstack.org/openstack/heat"
          export DEVSTACK_GATE_TEMPEST=0
          export DEVSTACK_GATE_EXERCISES=0
          export DEVSTACK_GATE_INSTALL_TESTONLY=1
          export KEEP_LOCALRC=1
          export PROJECTS="openstack/sahara $PROJECTS"
          export PROJECTS="openstack/sahara-tests $PROJECTS"
          export PROJECTS="openstack/sahara-image-elements openstack/sahara-extra $PROJECTS"
          if [ "neutron" == "nova" ] ; then
              export DEVSTACK_GATE_NEUTRON=0
          else
              export DEVSTACK_GATE_NEUTRON=1
          fi
          if [ "$ZUUL_PROJECT" = "openstack/python-saharaclient" ]; then
              export DEVSTACK_PROJECT_FROM_GIT=python-saharaclient
          fi
          if [ "1" -eq 1 ] ; then
              export DEVSTACK_GATE_TOPOLOGY="multinode"
          fi
          if [ "0" -eq 1 ] ; then
              export DEVSTACK_LOCAL_CONFIG+=$'\n'"SAHARA_USE_MOD_WSGI=True"
          fi
          if  [ "0" -eq 1 ] ; then
              export DEVSTACK_GATE_USE_PYTHON3=True
          fi
          export BRANCH_OVERRIDE=default
          if [ "default" != "default" ] ; then
              export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
          fi

          function pre_test_hook {
              cd /opt/stack/new/sahara-tests/tools/gate/scenario
              ./pre_test_hook.sh neutron spark
          }
          export -f pre_test_hook

          function post_test_hook {
              cd /opt/stack/new/sahara-tests/tools/gate/scenario
              ./post_test_hook.sh neutron spark
          }
          export -f post_test_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
