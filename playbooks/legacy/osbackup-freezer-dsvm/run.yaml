- hosts: all
  name: Autoconverted job legacy-osbackup-freezer-dsvm from old job gate-osbackup-freezer-dsvm-ubuntu-xenial
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - shell:
        cmd: |
          set -e
          set -x
          cat > clonemap.yaml << EOF
          clonemap:
            - name: openstack-infra/devstack-gate
              dest: devstack-gate
          EOF
          /usr/zuul-env/bin/zuul-cloner -m clonemap.yaml --cache-dir /opt/git \
              git://git.openstack.org \
              openstack-infra/devstack-gate
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -e
          set -x
          cat << 'EOF' >>"/tmp/dg-local.conf"
          [[local|localrc]]
          # enable freezer-agent and freezer-scheduler
          enable_plugin freezer git://git.openstack.org/openstack/freezer
          # enable freezer-api and python-freezerclient
          enable_plugin freezer-api https://git.openstack.org/openstack/freezer-api
          # enable freezer-web-ui and python-freezerclient
          enable_plugin freezer-web-ui https://git.openstack.org/openstack/freezer-web-ui

          EOF
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -e
          set -x
          export PYTHONUNBUFFERED=true
          # checkout freezer components
          export PROJECTS="openstack/freezer-api $PROJECTS"
          export PROJECTS="openstack/freezer-web-ui $PROJECTS"
          export PROJECTS="openstack/freezer $PROJECTS"
          export PROJECTS="openstack/python-freezerclient $PROJECTS"
          export DEVSTACK_GATE_HORIZON=1
          # tempest config
          export DEVSTACK_GATE_TEMPEST=1
          export DEVSTACK_GATE_TEMPEST_ALL_PLUGINS=1
          TEMPEST_REGEX="$ZUUL_SHORT_PROJECT_NAME_tempest_plugin"
          export DEVSTACK_GATE_TEMPEST_REGEX=${TEMPEST_REGEX/\-/\_ }

          # which repo is being tested
          export DEVSTACK_PROJECT_FROM_GIT=$ZUUL_SHORT_PROJECT_NAME

          # This ensures that if we set override branch to something
          # else, we still take repo being tested from the zuul branch
          # name. So override branch can be 'stable/mitaka' but we can
          # test master changes.
          uc_project=`echo $DEVSTACK_PROJECT_FROM_GIT | tr [:lower:] [:upper:] | tr '-' '_' | sed 's/[^A-Z_]//'`
          export "OVERRIDE_"$uc_project"_PROJECT_BRANCH"=$ZUUL_BRANCH

          function gate_hook {
              source $BASE/new/$ZUUL_SHORT_PROJECT_NAME/devstack/gate_hook.sh
          }
          export -f gate_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
